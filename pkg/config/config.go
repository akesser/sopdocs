package config

import (
	"io/ioutil"

	"github.com/ghodss/yaml"
)

type DocConfig struct {
	Scan                 *ScanConfig `yaml:"scan,omitempty"`
	TemplateFolder       *string     `yaml:"templateFolder,omitempty"`
	ExampleProject       *string     `yaml:"exampleProject,omitempty"`
	RepositoryConfigFile *string     `yaml:"repositoryConfigFile,omitempty"`
}

type ScanConfig struct {
	Regex  *string       `yaml:"regex,omitempty"`
	Ignore *IgnoreConfig `yaml:"ignore,omitempty"`
}

type IgnoreConfig struct {
	Regexes  []*string `yaml:"regexes,omitempty"`
	Files    []*string `yaml:"files,omitempty"`
	Groups   []*string `yaml:"groups,omitempty"`
	Versions []*string `yaml:"versions,omitempty"`
}

type RepoConfig struct {
	Ignore *IgnoreConfig `yaml:"ignore,omitempty"`
}

func LoadConfigWithDefaults(filepath string) (*DocConfig, error) {
	scanRegex := "^.*.\\.yaml"
	templateDir := "template"
	exampleProject := "crossplane/crossplane@v0.10.0"
	repositoryIgnoreFile := "crdsdev-config.yaml"

	defaultConfig := DocConfig{
		Scan: &ScanConfig{
			Regex: &scanRegex,
		},
		TemplateFolder:       &templateDir,
		ExampleProject:       &exampleProject,
		RepositoryConfigFile: &repositoryIgnoreFile,
	}

	return LoadConfig(defaultConfig, filepath)
}

func LoadConfig(defaultConfig DocConfig, filepath string) (*DocConfig, error) {

	rawConfig, err := ioutil.ReadFile(filepath)
	if err != nil {
		return nil, err
	}

	config := defaultConfig.DeepCopy()

	err = yaml.Unmarshal(rawConfig, config)
	if err != nil {
		return nil, err
	}
	return config, nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DocConfig) DeepCopyInto(out *DocConfig) {
	*out = *in
	if in.Scan != nil {
		in, out := &in.Scan, &out.Scan
		*out = new(ScanConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.TemplateFolder != nil {
		in, out := &in.TemplateFolder, &out.TemplateFolder
		*out = new(string)
		**out = **in
	}
	if in.ExampleProject != nil {
		in, out := &in.ExampleProject, &out.ExampleProject
		*out = new(string)
		**out = **in
	}
	if in.RepositoryConfigFile != nil {
		in, out := &in.RepositoryConfigFile, &out.RepositoryConfigFile
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchConfig.
func (in *DocConfig) DeepCopy() *DocConfig {
	if in == nil {
		return nil
	}
	out := new(DocConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScanConfig) DeepCopyInto(out *ScanConfig) {
	*out = *in
	if in.Regex != nil {
		in, out := &in.Regex, &out.Regex
		*out = new(string)
		**out = **in
	}
	if in.Ignore != nil {
		in, out := &in.Ignore, &out.Ignore
		*out = new(IgnoreConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchConfig.
func (in *ScanConfig) DeepCopy() *ScanConfig {
	if in == nil {
		return nil
	}
	out := new(ScanConfig)
	in.DeepCopyInto(out)
	return out
}

func (in *IgnoreConfig) DeepCopyInto(out *IgnoreConfig) {
	*out = *in

	if in.Regexes != nil {
		in, out := &in.Regexes, &out.Regexes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Versions != nil {
		in, out := &in.Versions, &out.Versions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

func (in *IgnoreConfig) DeepCopy() *IgnoreConfig {
	if in == nil {
		return nil
	}
	out := new(IgnoreConfig)
	in.DeepCopyInto(out)
	return out
}
